from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

import validators
import messages
import keyboards.replies as kb_r
from keyboards.builders import choice_keyboard
from states import Register, Edit, GlobalStates
from utils import profile_template
from database import requests

router = Router()


@router.callback_query(F.data == 'signup')
async def start_signup(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    await state.set_state(Register.sex)
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª', reply_markup=choice_keyboard(['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'], size=(2, 1)))


@router.message(Register.sex)
async def handle_sex(message: Message, state: FSMContext):
    if validators.sex_validate(data=message.text):
        sex = 1 if message.text == '–ú—É–∂—Å–∫–æ–π' else 0
        await state.update_data(sex=sex)
        await state.update_data(tg_id=message.from_user.id)
        await state.set_state(Register.search_desire)
        await message.answer(text='–ß—å–∏ –∞–Ω–∫–µ—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å?', reply_markup=kb_r.search_desire)
        return
    else:
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', reply_markup=choice_keyboard(['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'], size=(2, 1)))
        return


@router.message(Register.search_desire)
async def handle_search_desire(message: Message, state: FSMContext):
    if validators.search_desire_validate(message.text):
        search_desire = {'–ü–∞—Ä–Ω–µ–π': 1, '–î–µ–≤—É—à–µ–∫': 0, '–ù–µ –≤–∞–∂–Ω–æ': None}.get(message.text)
        await state.update_data(search_desire=search_desire)
        await state.set_state(Register.searched_by)
        await message.answer(text='–ö–æ–º—É –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É?', reply_markup=kb_r.searched_by)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ—Ç–Ω–æ', reply_markup=kb_r.search_desire)
        return 


@router.message(Register.searched_by)
async def handle_searched_by(message: Message, state: FSMContext):
    if validators.searched_by_validate(message.text):
        searched_by = {'–î–µ–≤—É—à–∫–∞–º': 0, '–ü–∞—Ä–Ω—è–º': 1, '–ù–µ –≤–∞–∂–Ω–æ': None}.get(message.text)
        await state.update_data(searched_by=searched_by)
        await state.set_state(Register.name)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è', reply_markup=choice_keyboard(f'{message.from_user.username}'))
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ—Ç–Ω–æ', reply_markup=kb_r.search_desire)
        return 


@router.message(Register.name)
async def handle_name(message: Message, state: FSMContext):
    if validators.name_validate(message.text):
        await state.update_data(username=message.text)
        await state.set_state(Register.age)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç')
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', reply_markup=choice_keyboard(f'{message.from_user.username}'))
        return


@router.message(Register.age)
async def handle_age(message: Message, state: FSMContext):
    if validators.age_validate(message.text):
        await state.update_data(age=int(message.text))
        await state.set_state(Register.city)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
        return


@router.message(Register.city)
async def handle_city(message: Message, state: FSMContext):
    if validators.city_validate(message.text):
        await state.update_data(city=message.text)
        await state.set_state(Register.description)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è', reply_markup=choice_keyboard('‚ùå –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å'))
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
        return


@router.message(Register.description)
async def handle_description(message: Message, state: FSMContext):
    if validators.description_validate(message.text):
        if message.text == '‚ùå –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å':
            await state.update_data(description=None)
        else:
            await state.update_data(description=message.text)
        await state.set_state(Register.photo)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã')
    else:
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
        return


@router.message(Register.photo)
async def handle_photo(message: Message, state: FSMContext):
    if validators.photo_validate(message.photo):
        photo = message.photo[-1].file_id
        await state.update_data(photo=photo)
        data = await state.get_data()
        await requests.insert_user(user_data=data, tg_id=message.from_user.id)
        await send_profile(message=message, state=state, after_register=True)
        await message.answer(text=messages.FINISH_REGISTER, reply_markup=kb_r.menu_keyboard)
        await state.clear()
        return
    else:
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
        return


@router.message(F.text == 'üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞')
async def send_profile(message: Message, state: FSMContext, after_register=False):
    await state.set_state(GlobalStates.profile_edit)
    await message.answer('–í–æ—Ç –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞: ')
    user = await requests.select_user_profile(tg_id=message.from_user.id)
    if not after_register:
        if user.description:
            await message.answer_photo(
            photo=user.photo, caption=profile_template(username=user.username, age=user.age, city=user.city,\
            description=user.description, sex=user.sex, search_desire=user.search_desire, searched_by=user.searched_by)
            , reply_markup=kb_r.profile_keyboard)
    else:
        await message.answer_photo(
            photo=user.photo, caption=profile_template(username=user.username, age=user.age, city=user.city,\
            description=user.description, sex=user.sex, search_desire=user.search_desire, searched_by=user.searched_by)
            )


@router.message(GlobalStates.profile_edit)
async def profile_edit(message: Message, state: FSMContext):
    if message.text == '‚≠êÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è', reply_markup=choice_keyboard('–ù–∞–∑–∞–¥'))
        await state.set_state(Edit.name)
    elif message.text == 'üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç', reply_markup=choice_keyboard('–ù–∞–∑–∞–¥'))
        await state.set_state(Edit.age) 
    elif message.text == 'üöπ –í—ã–±—Ä–∞—Ç—å –ø–æ–ª':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª', reply_markup=choice_keyboard(['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π', '–ù–∞–∑–∞–¥'], size=(2, 3)))
        await state.set_state(Edit.sex)
    elif message.text == 'üèôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥', reply_markup=choice_keyboard('–ù–∞–∑–∞–¥'))
        await state.set_state(Edit.city)
    elif message.text == 'üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=choice_keyboard('–ù–∞–∑–∞–¥'))
        await state.set_state(Edit.description)
    elif message.text == 'üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ':
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ', reply_markup=choice_keyboard('–ù–∞–∑–∞–¥'))
        await state.set_state(Edit.photo)
    elif message.text == 'üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ':
        await state.set_state(Register.sex)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª', reply_markup=choice_keyboard(['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'], size=(2, 1)))
    elif message.text == '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        from handlers.commands import help

        await help(message=message, state=state)
    else:
        await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞')
        return


@router.message(Edit.name)
async def change_name(message: Message, state: FSMContext):
    name = message.text
    if validators.name_validate(name) and name != '–ù–∞–∑–∞–¥':
        await requests.update_single_property(tg_id=message.from_user.id, property='username', new_value=message.text)
        await send_profile(message=message, state=state)
        await message.answer(text='–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ üéâ')
    elif name == '–ù–∞–∑–∞–¥':
        await state.set_state(GlobalStates.profile_edit)
        await send_profile(message=message, state=state)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', reply_markup=choice_keyboard('–ù–∞–∑–∞–¥'))
        return


@router.message(Edit.age)
async def change_age(message: Message, state: FSMContext):
    age = message.text
    if validators.name_validate(age) and age != '–ù–∞–∑–∞–¥':
        await requests.update_single_property(tg_id=message.from_user.id, property='age', new_value=int(message.text))
        await send_profile(message=message, state=state)
        await message.answer(text='–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω üéâ')
    elif age == '–ù–∞–∑–∞–¥':
        await state.set_state(GlobalStates.profile_edit)
        await send_profile(message=message, state=state)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', reply_markup=choice_keyboard('–ù–∞–∑–∞–¥'))
        return


@router.message(Edit.sex)
async def change_sex(message: Message, state: FSMContext):
    if validators.sex_validate(message.text) and message.text != '–ù–∞–∑–∞–¥':
        sex = {'–ú—É–∂—Å–∫–æ–π': 1, '–ñ–µ–Ω—Å–∫–∏–π': 0}.get(message.text)
        await requests.update_single_property(tg_id=message.from_user.id, property='sex', new_value=sex)
        await state.set_state(Edit.search_desire)
        await message.answer(text='–ö–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å?', reply_markup=choice_keyboard(['–ü–∞—Ä–Ω–µ–π', '–î–µ–≤—É—à–µ–∫', '–ù–µ –≤–∞–∂–Ω–æ', '–ù–∞–∑–∞–¥'], size=(3, 1)))
    elif message.text == '–ù–∞–∑–∞–¥':
        await state.set_state(GlobalStates.profile_edit)
        await send_profile(message=message, state=state)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', reply_markup=choice_keyboard('–ù–∞–∑–∞–¥'))
        return


@router.message(Edit.search_desire)
async def change_sex(message: Message, state: FSMContext):
    if validators.search_desire_validate(message.text) and message.text != '–ù–∞–∑–∞–¥':
        search_desire = {'–ü–∞—Ä–Ω–µ–π': 1, '–î–µ–≤—É—à–µ–∫': 0, '–ù–µ –≤–∞–∂–Ω–æ': None}.get(message.text)
        await requests.update_single_property(tg_id=message.from_user.id, property='search_desire', new_value=search_desire)
        await state.set_state(Edit.searched_by)
        await message.answer(text='–ö–æ–º—É –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É?', reply_markup=choice_keyboard(['–ü–∞—Ä–Ω—è–º', '–î–µ–≤—É—à–∫–∞–º', '–ù–µ –≤–∞–∂–Ω–æ', '–ù–∞–∑–∞–¥'], size=(3, 1)))
    elif message.text == '–ù–∞–∑–∞–¥':
        await state.set_state(GlobalStates.profile_edit)
        await send_profile(message=message, state=state)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', reply_markup=choice_keyboard('–ù–∞–∑–∞–¥'))
        return


@router.message(Edit.searched_by)
async def change_sex(message: Message, state: FSMContext):
    if validators.name_validate(message.text) and message.text != '–ù–∞–∑–∞–¥':
        searched_by = {'–î–µ–≤—É—à–∫–∞–º': 0, '–ü–∞—Ä–Ω—è–º': 1, '–ù–µ –≤–∞–∂–Ω–æ': None}.get(message.text)
        await requests.update_single_property(tg_id=message.from_user.id, property='searched_by', new_value=searched_by)
        await send_profile(message=message, state=state)
        await message.answer(text='–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã üéâ')
    elif message.text == '–ù–∞–∑–∞–¥':
        await state.set_state(GlobalStates.profile_edit)
        await send_profile(message=message, state=state)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', reply_markup=choice_keyboard('–ù–∞–∑–∞–¥'))
        return


@router.message(Edit.city)
async def change_city(message: Message, state: FSMContext):
    city = message.text
    if validators.name_validate(city) and city != '–ù–∞–∑–∞–¥':
        await requests.update_single_property(tg_id=message.from_user.id, property='city', new_value=message.text)
        await send_profile(message=message, state=state)
        await message.answer(text='–í–∞—à –≥–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω üéâ')
    elif city == '–ù–∞–∑–∞–¥':
        await state.set_state(GlobalStates.profile_edit)
        await send_profile(message=message, state=state)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', reply_markup=choice_keyboard('–ù–∞–∑–∞–¥'))
        return


@router.message(Edit.description)
async def change_description(message: Message, state: FSMContext):
    description = message.text
    if validators.name_validate(description) and description != '–ù–∞–∑–∞–¥':
        await requests.update_single_property(tg_id=message.from_user.id, property='description', new_value=message.text)
        await send_profile(message=message, state=state)
        await message.answer(text='–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ üéâ')
    elif description == '–ù–∞–∑–∞–¥':
        await state.set_state(GlobalStates.profile_edit)
        await send_profile(message=message, state=state)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', reply_markup=choice_keyboard('–ù–∞–∑–∞–¥'))
        return


@router.message(Edit.photo)
async def change_photo(message: Message, state: FSMContext):
    photo = message.photo
    if validators.name_validate(photo) and photo != '–ù–∞–∑–∞–¥':
        await requests.update_single_property(tg_id=message.from_user.id, property='photo', new_value=message.photo[-1].file_id)
        await send_profile(message=message, state=state)
        await message.answer(text='–í–∞—à–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ üéâ')
    elif photo == '–ù–∞–∑–∞–¥':
        await state.set_state(GlobalStates.profile_edit)
        await send_profile(message=message, state=state)
    else:
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', reply_markup=choice_keyboard('–ù–∞–∑–∞–¥'))
        return